{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Transforms a curried function into a function invoked with multiple arguments.\n*\n* @param {Function} fcn - curried function\n* @param {PositiveInteger} [arity] - number of parameters\n* @param {*} [thisArg] - evaluation context\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} `arity` argument must be a positive integer\n* @returns {Function} uncurried function\n*\n* @example\n* function addX( x ) {\n*     return function addY( y ) {\n*         return x + y;\n*     };\n* }\n*\n* var add = uncurryRight( addX );\n*\n* var sum = add( 3, 2 );\n* // returns 5\n*/\nfunction uncurryRight( fcn, arity, thisArg ) {\n\tvar context;\n\tvar len;\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t}\n\tif ( arguments.length < 2 ) {\n\t\tlen = null;\n\t}\n\telse if ( arguments.length > 2 ) {\n\t\tlen = arity;\n\t\tcontext = thisArg;\n\t\tif ( !isPositiveInteger( len ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Arity argument must be a positive integer. Value: `%s`.', len ) );\n\t\t}\n\t}\n\telse if ( isPositiveInteger( arity ) ) {\n\t\tlen = arity;\n\t}\n\telse {\n\t\tlen = null;\n\t\tcontext = arity;\n\t}\n\treturn uncurried;\n\n\t/**\n\t* Uncurried function.\n\t*\n\t* @private\n\t* @param {...*} args - arguments\n\t* @throws {Error} if arity is set, must provide expected number of input arguments\n\t* @throws {Error} configured arity must be compatible with curried function\n\t* @throws {Error} if arity is not set, number of arguments must be compatible with curried function\n\t* @returns {*} function result\n\t*/\n\tfunction uncurried() {\n\t\tvar f;\n\t\tvar i;\n\n\t\tf = fcn;\n\t\tif ( len ) {\n\t\t\tif ( len > arguments.length ) {\n\t\t\t\tthrow new Error( format( 'insufficient arguments. Expected %u argument(s) and only received %u argument(s).', len, arguments.length ) );\n\t\t\t}\n\t\t\tfor ( i = len-1; i >= 0; i-- ) {\n\t\t\t\tif ( isFunction( f ) ) {\n\t\t\t\t\tf = f.call( context, arguments[ i ] );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error( format( 'invalid invocation. The configured arity exceeds the number of possible curried function invocations. Expected: `%u`. Actual: `%u`.', len, i ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn f;\n\t\t}\n\t\tfor ( i = arguments.length-1; i >= 0; i-- ) {\n\t\t\tif ( isFunction( f ) ) {\n\t\t\t\tf = f.call( context, arguments[ i ] );\n\t\t\t} else {\n\t\t\t\tthrow new Error( format( 'invalid invocation. Number of arguments exceeds the number of possible curried function invocations. Expected: `%u`. Actual: `%u`.', arguments.length, i ) );\n\t\t\t}\n\t\t}\n\t\treturn f;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = uncurryRight;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Transform a curried function into a function invoked with multiple arguments.\n*\n* @module @stdlib/utils-uncurry-right\n*\n* @example\n* var uncurryRight = require( '@stdlib/utils-uncurry-right' );\n*\n* function addX( x ) {\n*     return function addY( y ) {\n*         return x + y;\n*     };\n* }\n*\n* var add = uncurryRight( addX );\n*\n* var sum = add( 3, 2 );\n* // returns 5\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAa,QAAS,4BAA6B,EACnDC,EAAoB,QAAS,oCAAqC,EAAE,YACpEC,EAAS,QAAS,uBAAwB,EA2B9C,SAASC,EAAcC,EAAKC,EAAOC,EAAU,CAC5C,IAAIC,EACAC,EACJ,GAAK,CAACR,EAAYI,CAAI,EACrB,MAAM,IAAI,UAAWF,EAAQ,oEAAqEE,CAAI,CAAE,EAEzG,GAAK,UAAU,OAAS,EACvBI,EAAM,aAEG,UAAU,OAAS,GAG5B,GAFAA,EAAMH,EACNE,EAAUD,EACL,CAACL,EAAmBO,CAAI,EAC5B,MAAM,IAAI,UAAWN,EAAQ,4EAA6EM,CAAI,CAAE,OAGxGP,EAAmBI,CAAM,EAClCG,EAAMH,GAGNG,EAAM,KACND,EAAUF,GAEX,OAAOI,EAYP,SAASA,GAAY,CACpB,IAAIC,EACAC,EAGJ,GADAD,EAAIN,EACCI,EAAM,CACV,GAAKA,EAAM,UAAU,OACpB,MAAM,IAAI,MAAON,EAAQ,oFAAqFM,EAAK,UAAU,MAAO,CAAE,EAEvI,IAAMG,EAAIH,EAAI,EAAGG,GAAK,EAAGA,IACxB,GAAKX,EAAYU,CAAE,EAClBA,EAAIA,EAAE,KAAMH,EAAS,UAAWI,CAAE,CAAE,MAEpC,OAAM,IAAI,MAAOT,EAAQ,sIAAuIM,EAAKG,CAAE,CAAE,EAG3K,OAAOD,CACR,CACA,IAAMC,EAAI,UAAU,OAAO,EAAGA,GAAK,EAAGA,IACrC,GAAKX,EAAYU,CAAE,EAClBA,EAAIA,EAAE,KAAMH,EAAS,UAAWI,CAAE,CAAE,MAEpC,OAAM,IAAI,MAAOT,EAAQ,qIAAsI,UAAU,OAAQS,CAAE,CAAE,EAGvL,OAAOD,CACR,CACD,CAKAX,EAAO,QAAUI,IC5EjB,IAAIS,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isFunction", "isPositiveInteger", "format", "uncurryRight", "fcn", "arity", "thisArg", "context", "len", "uncurried", "f", "i", "main"]
}
