{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Transforms a curried function into a function invoked with multiple arguments.\n*\n* @param {Function} fcn - curried function\n* @param {PositiveInteger} [arity] - number of parameters\n* @param {*} [thisArg] - evaluation context\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} `arity` argument must be a positive integer\n* @returns {Function} uncurried function\n*\n* @example\n* function addX( x ) {\n*     return function addY( y ) {\n*         return x + y;\n*     };\n* }\n*\n* var add = uncurryRight( addX );\n*\n* var sum = add( 3, 2 );\n* // returns 5\n*/\nfunction uncurryRight( fcn, arity, thisArg ) {\n\tvar context;\n\tvar len;\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( '1Y53c,J9', fcn ) );\n\t}\n\tif ( arguments.length < 2 ) {\n\t\tlen = null;\n\t}\n\telse if ( arguments.length > 2 ) {\n\t\tlen = arity;\n\t\tcontext = thisArg;\n\t\tif ( !isPositiveInteger( len ) ) {\n\t\t\tthrow new TypeError( format( '1Y5Az,On', len ) );\n\t\t}\n\t}\n\telse if ( isPositiveInteger( arity ) ) {\n\t\tlen = arity;\n\t}\n\telse {\n\t\tlen = null;\n\t\tcontext = arity;\n\t}\n\treturn uncurried;\n\n\t/**\n\t* Uncurried function.\n\t*\n\t* @private\n\t* @param {...*} args - arguments\n\t* @throws {Error} if arity is set, must provide expected number of input arguments\n\t* @throws {Error} configured arity must be compatible with curried function\n\t* @throws {Error} if arity is not set, number of arguments must be compatible with curried function\n\t* @returns {*} function result\n\t*/\n\tfunction uncurried() {\n\t\tvar f;\n\t\tvar i;\n\n\t\tf = fcn;\n\t\tif ( len ) {\n\t\t\tif ( len > arguments.length ) {\n\t\t\t\tthrow new Error( format( '1Y5Bs,Oo', len, arguments.length ) );\n\t\t\t}\n\t\t\tfor ( i = len-1; i >= 0; i-- ) {\n\t\t\t\tif ( isFunction( f ) ) {\n\t\t\t\t\tf = f.call( context, arguments[ i ] );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error( format( '1Y5Bv,Op', len, i ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn f;\n\t\t}\n\t\tfor ( i = arguments.length-1; i >= 0; i-- ) {\n\t\t\tif ( isFunction( f ) ) {\n\t\t\t\tf = f.call( context, arguments[ i ] );\n\t\t\t} else {\n\t\t\t\tthrow new Error( format( '1Y5Bu,Oq', arguments.length, i ) );\n\t\t\t}\n\t\t}\n\t\treturn f;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default uncurryRight;\n"],"names":["uncurryRight","fcn","arity","thisArg","context","len","isFunction","TypeError","format","arguments","length","isPositiveInteger","uncurried","f","i","Error","call"],"mappings":";;kTAmDA,SAASA,EAAcC,EAAKC,EAAOC,GAClC,IAAIC,EACAC,EACJ,IAAMC,EAAYL,GACjB,MAAM,IAAIM,UAAWC,EAAQ,WAAYP,IAE1C,GAAKQ,UAAUC,OAAS,EACvBL,EAAM,UAEF,GAAKI,UAAUC,OAAS,GAG5B,GADAN,EAAUD,GACJQ,EAFNN,EAAMH,GAGL,MAAM,IAAIK,UAAWC,EAAQ,WAAYH,SAGjCM,EAAmBT,GAC5BG,EAAMH,GAGNG,EAAM,KACND,EAAUF,GAEX,OAAOU,EAYP,SAASA,IACR,IAAIC,EACAC,EAGJ,GADAD,EAAIZ,EACCI,EAAM,CACV,GAAKA,EAAMI,UAAUC,OACpB,MAAM,IAAIK,MAAOP,EAAQ,WAAYH,EAAKI,UAAUC,SAErD,IAAMI,EAAIT,EAAI,EAAGS,GAAK,EAAGA,IAAM,CAC9B,IAAKR,EAAYO,GAGhB,MAAM,IAAIE,MAAOP,EAAQ,WAAYH,EAAKS,IAF1CD,EAAIA,EAAEG,KAAMZ,EAASK,UAAWK,GAIjC,CACD,OAAOD,CACP,CACD,IAAMC,EAAIL,UAAUC,OAAO,EAAGI,GAAK,EAAGA,IAAM,CAC3C,IAAKR,EAAYO,GAGhB,MAAM,IAAIE,MAAOP,EAAQ,WAAYC,UAAUC,OAAQI,IAFvDD,EAAIA,EAAEG,KAAMZ,EAASK,UAAWK,GAIjC,CACD,OAAOD,CACP,CACF"}